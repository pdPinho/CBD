/*
*	File layout: 
*		// What we're trying to achieve (question)	
*		// How it was solved (query)
*		// Where to find output (results)
*/



use('cbd');

// Liste todos os documentos da coleção.
db.restaurants.find();
// query01.json


// Apresente os campos restaurant_id, nome, localidade e gastronomia para todos os documentos da coleção.
options = {
    restaurant_id:1,
    nome:1,
    localidade:1,
    gastronomia:1,
}
db.getCollection('restaurants').find({}, options);
// query02.json


// Apresente os campos restaurant_id, nome, localidade e código postal (zipcode), mas exclua o campo _id de todos os documentos da coleção.
options = {
    _id:0,
    restaurant_id:1,
    nome:1,
    localidade:1,
    address:{zipcode:1},
}
db.getCollection('restaurants').find({}, options);
// query03.json


// Indique o total de restaurantes localizados no Bronx
db.getCollection('restaurants').find({localidade:"Bronx"}).count();
// query04.json


// Apresente os primeiros 15 restaurantes localizados no Bronx, ordenados por ordem crescente de nome.
db.getCollection('restaurants').find({localidade:"Bronx"}).sort({nome:1}).limit(15);
// query05.json


// Liste todos os restaurantes que tenham pelo menos um score superior a 85
db.getCollection('restaurants').find(
    {"grades.score":{$gt:85}},
    {
        _id:0,
        nome:1,
        grades:{score:1}
    }
)
// query06.json


// Encontre os restaurantes que obtiveram uma ou mais pontuações (score) entre [80 e 100].
db.getCollection('restaurants').find(
    {
        grades: {
            $elemMatch: {
                score: { $gte: 80, $lte: 100}
            }
        }
    },
    {
        _id:0,
        nome:1,
        grades:{score:1}
    }    
)
// query07.json


// Indique os restaurantes com latitude inferior a -95,7
db.getCollection('restaurants').find(
    {"address.coord.0":{$lt:-95.7}},
    {
        _id:0,
        nome:1,
        address:{coord:1}
    }
)
// query08.json


// Indique os restaurantes que não têm gastronomia "American", tiveram uma (ou mais) pontuação superior a 70 e estão numa latitude inferior a -65.
db.getCollection('restaurants').find(
    {
        "gastronomia":{$not: { $regex: "American"} }, 
        "grades.score":{$gt: 70},
        "address.coord.0":{$lt: -65}
    },
    {
        _id:0,
        gastronomia:1,
        address:{coord:1},
        grades:{score:1}
    }
)
// query09.json


// Liste o restaurant_id, o nome, a localidade e gastronomia dos restaurantes cujo nome começam por "Wil"
db.getCollection('restaurants').find(
    {
        "nome":{$regex : "Wil"}
    },
    {
        _id:0,
        restaurant_id:1,
        nome:1,
        localidade:1,
        gastronomia:1
    }
)
// query10.json


// Liste o nome, a localidade e a gastronomia dos restaurantes que pertencem ao Bronx e cuja gastronomia é do tipo "American" ou "Chinese"
db.getCollection('restaurants').find(
    {
        localidade: "Bronx",
        $or: [{gastronomia: "American"}, {gastronomia: "Chinese"}]
    },
    {
        _id:0,
        nome:1,
        localidade:1,
        gastronomia:1
    }
)
// query11.json


// Liste o restaurant_id, o nome, a localidade e a gastronomia dos restaurantes localizados em "Staten Island", "Queens", ou "Brooklyn"
db.getCollection('restaurants').find(
    {
        $or: [{localidade: "Staten Island"}, {localidade: "Queens"}, {localidade: "Brooklyn"}]
    },
    {
        _id:0,
        restaurant_id:1,
        nome:1,
        localidade:1,
        gastronomia:1
    }
)
// query12.json


// Liste o nome, a localidade, o score e gastronomia dos restaurantes que alcançaram sempre pontuações inferiores ou igual a 3
db.getCollection('restaurants').find(
    {
        "grades": {$not: 
                    {$elemMatch: 
                        {"score": 
                            {$not: 
                                {$lte: 3}
                            }
                        }
                    }
                }
    },
    {
        _id:0,
        nome:1,
        localidade:1,
        grades:{score:1},
        gastronomia:1
    }
)
// query13.json


// Liste o nome e as avaliações dos restaurantes que obtiveram uma avaliação com um grade "A", um score 10 na data "2014-08-11T00: 00: 00Z" (ISODATE)
db.getCollection('restaurants').find(
    {
        grades:{$elemMatch: {
            grade: "A",
            score: 10,
            date: new Date("2014-08-11T00:00:00Z")
        }}
    },
    {
        _id:0,
        nome:1,
        grades:{grade:1, score:1, date:1},
    }
)
// query14.json


// Liste o restaurant_id, o nome e os score dos restaurantes nos quais a segunda avaliação foi grade "A" e ocorreu em ISODATE "2014-08-11T00: 00: 00Z"
db.getCollection('restaurants').find(
    {
        $and: [
            {"grades.1.grade": "A"},
            {"grades.1.date": ISODate("2014-08-11T00:00:00Z")}
        ]
    },
    {
        _id:0,
        restaurant_id:1,
        nome:1,
        grades:{score:1}
    }
)
// query15.json


// Liste o restaurant_id, o nome, o endereço (address) e as coordenadas geográficas (coord) dos restaurantes onde o 2º elemento 
// da matriz de coordenadas tem um valor superior a 42 e inferior ou igual a 52
db.getCollection('restaurants').find(
    {
        "address.coord.1": {$gt: 42, $lte:52}
    },
    {
        _id:0,
        restaurant_id:1,
        nome:1,
        address:1,
        coord:1
    }
)
// query16.json


// Liste nome, gastronomia e localidade de todos os restaurantes ordenando por ordem
// crescente da gastronomia e, em segundo, por ordem decrescente de localidade
db.getCollection('restaurants').aggregate(
    [
        {$sort: {gastronomia: 1, localidade: -1}},
        {$project:{
            _id:0,
            nome:1,
            gastronomia:1,
            localidade:1,
        }},
    ]
)
// query17.json


// Liste nome, localidade, grade e gastronomia de todos os restaurantes localizados em
// Brooklyn que não incluem gastronomia "American" e obtiveram uma classificação
// (grade) "A". Deve apresentá-los por ordem decrescente de gastronomia
db.getCollection('restaurants').aggregate(
    [
        {$sort: {gastronomia: -1}},
        {$project:{
            _id:0,
            nome:1,
            localidade:1,
            "grades.grade":1,
            gastronomia:1
        }},
        {$match: {
            localidade: "Brooklyn",
            gastronomia: {$not: {$regex: "American"}},
            "grades.grade": "A"
        }}
    ]
)
// query18.json


// Indique o número total de avaliações (numGrades) na coleção.
db.getCollection('restaurants').aggregate([
    {$group: 
        {   _id:null, 
            numGrades: {$sum: {$size: "$grades.grade"}}
        } 
    },
    {$project:{
        _id: 0,
        numGrades: 1,
    } },
])
// query19.json


// Apresente o nome e número de avaliações (numGrades) dos 3 restaurante com mais avaliações
db.getCollection('restaurants').aggregate([
    {$project:{
        _id: 0,
        nome: 1,
        numGrades: {$size: "$grades.grade"},
    } },
    {$sort: {numGrades: -1}},
    {$project:{
        _id: 0,
        nome: 1,
        numGrades: 1,
    }},
    {$limit : 3}
])
// query20.json


// Apresente o número total de avaliações (numGrades) em cada dia da semana
db.getCollection('restaurants').aggregate([
    {
        $unwind: "$grades"
    },
    {$group: {
        _id: {$dayOfWeek: "$grades.date"},
        numGrades: {$sum: 1}
    }}
])
// query21.json


// Conte o total de restaurante existentes em cada localidade
db.getCollection('restaurants').aggregate([
    {$group: {
        _id:"$localidade", 
        totalRestaurants: {$sum: 1}}
    }
])
// query22.json


// Indique os restaurantes que têm gastronomia "Portuguese", o somatório de score é
// superior a 50 e estão numa latitude inferior a -60
db.getCollection('restaurants').aggregate([
    {$project: {
        _id:0,
        nome: 1,
        gastronomia: "Portuguese",
        scoreSum: {$sum: "$grades.score"},
        "address.coord": 1, 
    }},
    {$match :{
        "scoreSum" : {$gt : 50},
        "address.coord.0": {$lt: -60}
    }}
])
// query23.json


// Apresente o número de gastronomias diferentes na rua "Fifth Avenue"
db.getCollection('restaurants').distinct("gastronomia", {"address.rua": "Fifth Avenue"}).length
// query24.json


// Apresente o nome e o score médio (avgScore) e número de avaliações (numGrades)
// dos restaurantes com score médio superior a 30 desde 1-Jan-2014
db.getCollection('restaurants').aggregate([
    {$unwind: "$grades"},
    {$match :{
        "grades.date": {$gte: ISODate("2014-01-01T00:00:00Z")}
    }},
    {$group: {
        _id: "$_id",
        nome: { $first: "$nome" },
        avgScore: {$avg: "$grades.score"},
        numGrades: {$sum: 1},
    }},
    {$project: {
        _id: 0
    }},
    {$match :{
        "avgScore": {$gt: 30},
    }}
])
// query25.json


///////////////////////////////////////////
//  QUERIES FROM 26 TILL 30 (SELF-MADE)  //
///////////////////////////////////////////

// Indique o nº total de avaliações em Bronx com gastronomia Chinese
db.getCollection('restaurants').aggregate([
    {$match :{
        localidade: "Bronx",
        gastronomia: "Chinese"
    }},
    {$project: {
        _id: 0,
        localidade: 1,
        gastronomia: 1,
        grades: {$size: "$grades.grade"},
    }},
    {$group: {
        _id: "$localidade",
        numGrades: {$sum: "$grades"}
    }}
])
// query26.json

// Indique o nome de todos os restaurantes com o zipcode 11208
db.getCollection('restaurants').aggregate([
    {$match: {
        "address.zipcode": "11208"
    }},
    {$project: {
        _id: 0,
        nome: 1
    }}
])
// query27.json

// Indique o nome, rua e localidade dos restaurantes com a palavra "Avenue" na sua rua
db.getCollection('restaurants').aggregate([
    {$match: {
        "address.rua": {$regex: "Avenue"}
    }},
    {$project: {
        _id: 0,
        nome: 1,
        "address.rua": 1,
        localidade: 1,
    }}
])
// query28.json

// Indique os diferentes nomes de restaurantes
db.getCollection('restaurants').aggregate([
    {$group: {
        _id: "$nome"
    }},
    {$project: {
        _id : 0,
        name: "$_id"
    }}
])
// query29.json

// Indique todas as letras usadas para avaliações (grades)
db.getCollection('restaurants').distinct("grades.grade")
// query30.json

